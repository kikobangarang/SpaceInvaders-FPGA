library ieee;
use ieee.std_logic_1164.all;

entity MAC is
port(
	putget, incPut, incGet, Reset, CLK: in std_logic;
	full, empty: out std_logic;
	Address: out std_logic_vector(2 downto 0)
);
end MAC;
	

architecture behavioral of MAC is

component CounterUpMAC port(
	CE, Reset, CLK: in std_logic;
	Q: out std_logic_vector(2 downto 0)
);
end component;

component Mux2_1_3bits port(
	incPutOut, incGetOut: in std_logic_vector(2 downto 0);
	putGet: in std_logic;
	Address: out std_logic_vector(2 downto 0)
);
end component;

component compare port(
	incPutOut, incGetOut: in std_logic_vector(2 downto 0);
	Q: out std_logic
);
end component;

component FFD port(
	CLK : in std_logic;
	RESET : in STD_LOGIC;
	SET : in std_logic;
	D : IN STD_LOGIC;
	EN : IN STD_LOGIC;
	Q : out std_logic
);
end component;


signal term0, term1: std_logic_vector(2 downto 0);
signal term2, term3: std_logic;

begin

Counter_U0: CounterUpMAC port map(
	CE => incPut, 
	Reset => Reset, 
	CLK => CLK,
	Q => term0
);

Counter_U1: CounterUpMAC port map(
	CE => incGet, 
	Reset => Reset, 
	CLK => CLK,
	Q => term1
);

Mux_U0: Mux2_1_3bits port map(
	incPutOut => term0, 
	incGetOut=> term1,
	putGet => putget,
	Address => Address
);

Compare_U0: compare port map(
	incPutOut => term0,
	incGetOut => term1,
	Q => term2
);

FFD_U0: FFD port map(
	CLK => CLK,
	RESET => Reset,
	SET => '0',
	D => putget,
	EN => '1',
	Q => term3
);

full <= term2 and term3;
empty <= term2 and not term3;

end behavioral;